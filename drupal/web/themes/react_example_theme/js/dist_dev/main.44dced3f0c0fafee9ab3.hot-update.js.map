{"version":3,"sources":["webpack:///./js/src/components/NodeReadWrite.jsx"],"names":["isValidData","data","undefined","length","NodeItem","id","drupal_internal__nid","title","body","contentList","updateContent","useState","showAdminOptions","setShowAdminOptions","handleClick","event","preventDefault","onEditSuccess","idx","findIndex","item","console","log","content","onDeleteSuccess","list","filter","value","NoData","NodeReadWrite","setFilter","showNodeAdd","setShowNodeAdd","useEffect","API_ROOT","url","headers","Headers","Accept","fetch","then","response","json","err","onNodeAddSuccess","unshift","target","toLowerCase","attributes","includes","map"],"mappings":"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","file":"main.44dced3f0c0fafee9ab3.hot-update.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport NodeAdd from \"./NodeAdd\";\nimport NodeEdit from \"./NodeEdit\";\nimport NodeDelete from \"./NodeDelete\";\n\n/**\n * Helper function to validate data retrieved from JSON:API.\n */\nfunction isValidData(data) {\n  if (data === null) {\n    return false;\n  }\n  if (data.data === undefined ||\n    data.data === null ||\n    data.data.length === 0 ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Component for displaying an individual article, with optional admin features.\n *\n * @param {string} id\n *   UUID of the article.\n * @param drupal_internal__nid\n *   Drupal node.nid of the article.\n * @param {string} title\n *   Title of the article.\n * @param {string} body\n *   Body of the article, contains HTML.\n * @param {array} contentList\n *   Complete list of articles.\n * @param {function} updateContent\n *   useState function to update contentList.\n */\nconst NodeItem = ({id, drupal_internal__nid, title, body, contentList, updateContent}) => {\n  const [showAdminOptions, setShowAdminOptions] = useState(false);\n\n  function handleClick(event) {\n    event.preventDefault();\n    setShowAdminOptions(!showAdminOptions)\n  }\n\n  function onEditSuccess(data) {\n    // Replace the edited item in the list with updated values.\n    const idx = contentList.findIndex(item => item.id === data.id);\n    console.log('index', {idx, data, content: contentList});\n    contentList[idx] = data;\n    updateContent([...contentList]);\n  }\n\n  function onDeleteSuccess(id) {\n    // Remove the deleted item from the list.\n    const list = contentList.filter(item => item.id !== id);\n    updateContent([...list]);\n  }\n\n  // Show the item with admin options.\n  if (showAdminOptions) {\n    return (\n      <div>\n        <hr/>\n        Admin options for {title}\n        <NodeEdit\n          id={id}\n          title={title}\n          body={body.value}\n          onSuccess={onEditSuccess}\n        />\n        <hr/>\n        <button onClick={handleClick}>\n          cancel\n        </button>\n        <NodeDelete\n          id={id}\n          title={title}\n          onSuccess={onDeleteSuccess}\n        />\n        <hr/>\n      </div>\n    );\n  }\n\n  // Show just the item.\n  return (\n    <div>\n      <a href={`/node/${drupal_internal__nid}`}>{title}</a>\n      {\" -- \"}\n      <button onClick={handleClick}>\n        edit\n      </button>\n    </div>\n  );\n};\n\n/**\n * Component to render when there are no articles to display.\n */\nconst NoData = () => (\n  <div>No articles found.</div>\n);\n\n/**\n * Display a list of Drupal article nodes.\n *\n * Retrieves articles from Drupal's JSON:API and then displays them along with\n * admin features to create, update, and delete articles.\n */\nconst NodeReadWrite = () => {\n  const [content, updateContent] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [showNodeAdd, setShowNodeAdd] = useState(false);\n\n  useEffect(() => {\n    // This should point to your local Drupal instance. Alternatively, for React\n    // applications embedded in a Drupal theme or module this could also be set\n    // to a relative path.\n    const API_ROOT = '/jsonapi/';\n    const url = `node/51?_format=json_recursive&max_depth=3`;\n\n    const headers = new Headers({\n      Accept: 'application/vnd.api+json',\n    });\n\n    fetch(url, {headers})\n      .then((response) => response.json())\n      .then((data) => {\n        if (isValidData(data)) {\n          // Initialize the list of content with data retrieved from Drupal.\n          console.log(data);\n          updateContent(data.data);\n        }\n      })\n      .catch(err => console.log('There was an error accessing the API', err));\n  }, []);\n\n  // Handle updates to state when a node is added.\n  function onNodeAddSuccess(data) {\n    // Add the new item to the top of the list.\n    content.unshift(data);\n    // Note the use of [...content] here, this is because we're\n    // computing new state based on previous state and need to use a\n    // functional update. https://reactjs.org/docs/hooks-reference.html#functional-updates\n    // [...content] syntax creates a new array with the values of\n    // content, and updates the state to that new array.\n    updateContent([...content]);\n  }\n\n  return (\n    <div>\n      <h2>Site content13--13-13</h2>\n      {content.length ? (\n        <>\n          <label htmlFor=\"filter\">Type to filter:</label>\n          <input\n            type=\"text\"\n            name=\"filter\"\n            placeholder=\"Start typing ...\"\n            onChange={(event => setFilter(event.target.value.toLowerCase()))}\n          />\n          <hr/>\n          {\n            // If there's a `filter` apply it to the list of nodes.\n            content.filter((item) => {\n              if (!filter) {\n                return item;\n              }\n\n              if (filter && (item.attributes.title.toLowerCase().includes(filter) || item.attributes.body.value.toLowerCase().includes(filter))) {\n                return item;\n              }\n            }).map((item) => (\n              <NodeItem\n                key={item.id}\n                id={item.id}\n                updateContent={updateContent}\n                contentList={content}\n                {...item.attributes}\n              />\n            ))\n          }\n        </>\n      ) : (\n        <NoData />\n      )}\n      <hr />\n      {showNodeAdd ? (\n        <>\n          <h3>Add a new article</h3>\n          <NodeAdd\n            onSuccess={onNodeAddSuccess}\n          />\n        </>\n      ) : (\n        <p>\n          Don't see what you're looking for?\n          <button onClick={() => setShowNodeAdd(true)}>Add a node</button>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default NodeReadWrite;\n"],"sourceRoot":""}